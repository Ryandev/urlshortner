{
    "globals": {
        "jest": true,
        "JSX": true
    },
    "extends": [
        "plugin:import/recommended",
        "eslint:recommended",
        "eslint:all",
        "plugin:react/recommended",
        "plugin:jest/recommended",
        "plugin:react-hooks/recommended",
        "plugin:@nx/react-typescript",
        "plugin:@typescript-eslint/all",
        "plugin:jsx-a11y/recommended"
    ],
    "root": true,
    "plugins": ["@nx", "jest", "react"],
    "rules": {},
    "env": {
        "jest/globals": true,
        "es6": true,
        "node": true,
        "browser": true
    },
    "parser": "@typescript-eslint/parser",
    "parserOptions": {
        "tsconfigRootDir": ".",
        "project": [
            "./tsconfig.base.json",
            "packages/*/tsconfig.json",
            "packages/*/tsconfig.app.json"
        ]
    },
    "settings": {
        "import/extensions": [".js", ".jsx", ".ts", ".tsx"],
        "import/parsers": {
            "@typescript-eslint/parser": [".ts", ".tsx"]
        },
        "import/resolver": {
            "typescript": {
                "directory": "./tsconfig.json" /* Intentionally break typescript-eslint #2878 */
            },
            "node": {
                "extensions": [".js", ".jsx", ".ts", ".tsx"]
            }
        },
        "react": {
            "version": "detect"
        }
    },
    "overrides": [
        /* Default JS/TS rules  */
        {
            "files": ["*.ts", "*.tsx", "*.js", "*.jsx"],
            "extends": ["plugin:@nx/typescript"],
            "rules": {
                /* eslint */
                "array-element-newline": ["error", "consistent"],
                /* Prettier rules override this */
                "arrow-parens": "off",
                "camelcase": [
                    "error",
                    {
                        "ignoreDestructuring": true
                    }
                ],
                /* Prettier rules override this */
                "dot-location": "off",
                /* Mix of arrow & function declarations used */
                "func-style": "off",
                /* Prettier rules override this */
                "function-paren-newline": "off",
                "function-call-argument-newline": ["error", "consistent"],
                "id-length": [
                    "error",
                    {
                        "exceptions": [
                            "_",
                            "i",
                            "x",
                            "y"
                        ] /* integer index & unused arg */
                    }
                ],
                /* Prettier rules override this */
                "implicit-arrow-linebreak": "off",

                /* Off x4 as per: https://github.com/typescript-eslint/typescript-eslint/blob/f335c504bcf75623d2d671e2e784b047e5e186b9/docs/getting-started/linting/FAQ.md#eslint-plugin-import */
                "import/named": "off",
                "import/namespace": "off",
                "import/default": "off",
                "import/no-named-as-default-member": "off",
                /* File extensions not needed for TS files */
                "import/extensions": [
                    "error",
                    "ignorePackages",
                    {
                        "js": "never",
                        "jsx": "never",
                        "ts": "never",
                        "tsx": "never"
                    }
                ],
                "import/no-extraneous-dependencies": [
                    "warn",
                    {
                        "devDependencies": [
                            "**/.storybook/*.js",
                            "**/.storybook/*.jsx",
                            "**/*.story.js",
                            "**/*.story.jsx",
                            "**/*.stories.js",
                            "**/*.stories.jsx",
                            "**/*.test.js",
                            "**/*.test.jsx",
                            "**/*.spec.js",
                            "**/*.spec.jsx",
                            "**/*.config.js",
                            "**/*.config.jsx",
                            "**/.storybook/*.ts",
                            "**/.storybook/*.tsx",
                            "**/*.story.ts",
                            "**/*.story.tsx",
                            "**/*.stories.ts",
                            "**/*.stories.tsx",
                            "**/*.test.ts",
                            "**/*.test.tsx",
                            "**/*.spec.ts",
                            "**/*.spec.tsx",
                            "**/*.config.ts",
                            "**/*.config.tsx",
                            "**/*.cy.ts",
                            "**/*.cy.tsx"
                        ]
                    }
                ],
                "max-lines-per-function": [
                    "warn",
                    {
                        "max": 100
                    }
                ],
                "max-lines": "warn",
                "max-len": ["warn", { "code": 90 }],
                /* Set to warn for now */
                "max-statements": "warn",
                /* Prettier rules override this */
                "multiline-ternary": "off",
                /* React function components are pascal cased */
                "new-cap": "off",
                /* Multiple imports can occur, 1 for type, 2 for values under TS files */
                "no-duplicate-imports": "off",
                /* Prettier overrides this */
                "no-extra-parens": "off",
                /* Disable in-favour of typescript variant below (which can factor in enums) */
                "no-magic-numbers": "off",
                /* Prettier will override */
                "no-mixed-operators": "off",
                "no-ternary": "off",
                /* Use '_' prefix used for private functions/variables */
                "no-underscore-dangle": "off",
                /* Prefer separate declarations */
                "one-var": ["error", "never"],
                /* Prettier will override */
                "object-property-newline": "off",
                "padded-blocks": ["error", "never"],
                /* Set to warn for now */
                "prefer-template": "warn",
                /* Typescript variant enabled instead */
                "prefer-readonly-parameter-types": ["off"],
                "quote-props": ["error", "as-needed"],
                /* Prettier auto formats imports, ignore */
                "sort-keys": "off",
                "sort-imports": "off",

                /* jest */
                "jest/expect-expect": "off" /* Incorrectly flagging files without test classes */,

                /* react */
                "react/jsx-props-no-spreading": "off",
                "react/jsx-uses-react": "off",
                "react/react-in-jsx-scope": "off",

                /* Typescript */
                /* Prettier overrides this */
                "@typescript-eslint/indent": "off",
                "@typescript-eslint/naming-convention": [
                    "error",
                    {
                        "selector": "variable",
                        "format": [
                            "PascalCase",
                            "UPPER_CASE",
                            "camelCase"
                        ] /* Pascal for Classes, UPPER_SNAKE for constants & camel for everything else */,
                        "leadingUnderscore": "allow",
                        "trailingUnderscore": "forbid"
                    }
                ],
                /* Prettier overrides this */
                "@typescript-eslint/no-extra-parens": "off",

                "@typescript-eslint/no-magic-numbers": [
                    "warn",
                    {
                        "ignoreEnums": true,
                        "ignore": [
                            -1, 0, 1, 10, 100
                        ] /* All magic numbers for enums & -1,0,1,10,100 */
                    }
                ],
                /* Set to warn for now, Marking parameters as readonly/Readonly/DeepReadonly doesn't fix all issues */
                "@typescript-eslint/no-type-alias": [
                    "warn",
                    {
                        "allowAliases": "always"
                    }
                ],
                "@typescript-eslint/prefer-readonly-parameter-types": [
                    "warn",
                    {
                        "checkParameterProperties": false
                    }
                ],

                /* Styling preferences */
                "@typescript-eslint/object-curly-spacing": "off",
                "@typescript-eslint/quotes": ["off", "single"],
                "@typescript-eslint/space-before-function-pare": "off",
                "@typescript-eslint/comma-dangle": "off",
                "@typescript-eslint/space-before-function-paren": "off",
                "@typescript-eslint/lines-around-comment": "off",
                "indent": "off",
                "react/jsx-indent": "off",
                "react/jsx-indent-props": "off",
                "spaced-comment": ["error", "always", { "exceptions": ["-", "+"] }],
                "react/jsx-filename-extension": [
                    "error",
                    { "extensions": [".tsx", ".ts"] }
                ],
                "no-multiple-empty-lines": [
                    "error",
                    { "max": 3, "maxEOF": 0, "maxBOF": 0 }
                ]
            }
        },

        /* JEST overrides */
        {
            "files": [
                "*.test.ts",
                "*.test.tsx",
                "*.test.js",
                "*.test.jsx",
                "*.spec.ts",
                "*.spec.tsx",
                "*.spec.js",
                "*.spec.jsx"
            ],
            "rules": {
                "@typescript-eslint/no-unsafe-call": "off" /* jest.Expect is flagged as any type */
            }
        },

        /* Cypress-E2E overrides */
        {
            "files": ["*.cy.ts", "*.cy.tsx", "*.cy.js", "*.cy.jsx"],
            "rules": {
                "jest/valid-expect-in-promise": "off" /* cy.get().then is flagged as promise */,
                "no-magic-numbers": "off" /* Disabling due to non-production code */,
                "@typescript-eslint/no-magic-numbers": "off"
            }
        }
    ]
}
